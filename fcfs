#include<stdio.h>
#include<conio.h>

typedef struct Process
{
    int id, arrival, burst, turnaround, waiting, completion;
} Process;

void sortByArrival(Process p[], int n)
{
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 0; j < n - 1; j++)
        {
            if (p[j].arrival > p[j + 1].arrival)
            {
                Process temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }
}

void fcfs(Process p[], int n, float *avgTAT, float *avgWT)
{
    sortByArrival(p, n);
    
    int time = 0;
    int totalTAT = 0, totalWT = 0;

    for (int i = 0; i < n; i++)
    {
       
        p[i].completion = time + p[i].burst;
        
       
        p[i].turnaround = p[i].completion - p[i].arrival;
        
      
        p[i].waiting = p[i].turnaround - p[i].burst;
        
       
        totalTAT += p[i].turnaround;
        totalWT += p[i].waiting;
        
       
        time = p[i].completion;
    }

   
    *avgTAT = (float)totalTAT / n;
    *avgWT = (float)totalWT / n;
}

int main()
{
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    
    Process p[n];
    
    for (int i = 0; i < n; i++)
    {
        p[i].id = i + 1;
        printf("Enter arrival time and burst time for process %d: ", p[i].id);
        scanf("%d %d", &p[i].arrival, &p[i].burst);
    }

    float avgTAT, avgWT;
    
    fcfs(p, n, &avgTAT, &avgWT);
    
    printf("\nProcess ID\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\twaiting Time\n");
    for (int i = 0; i < n; i++)
    {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", p[i].id, p[i].arrival, p[i].burst, p[i].completion, p[i].turnaround, p[i].waiting);
    }
    
    printf("\nAverage Turnaround Time: %.2f\n", avgTAT);
    printf("Average waiting Time: %.2f\n", avgWT);

    return 0;
}

